import torch
from torch import tensor
from collections import Counter
from dataloader import SpanishTweetsDataModule
from trainer import SpanishTweetsCLF
import pandas as pd
import lightning as L
import argparse


def create_argumentparser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--model_checkpoint", "-cp", type=str, required=True, default="spanish_tweets2/r18a2167/checkpoints/epoch=19-valid/average_final_metric=0.02.ckpt")
    parser.add_argument("--test_dataset_path", "-tdp", type=str, required=True, default="data/test_data/cleaned/cleaned_politicES_phase_2_test_public.csv")
    parser.add_argument("--output_path", "-op", type=str, required=True, default="results.csv")

    return parser


def create_decoding_dict():
    decoding_dict = {}
    decoding_dict['gender'] = {0: 'female', 1: 'male'}
    decoding_dict['profession'] = {0: 'celebrity', 1: 'journalist', 2: 'politician'}
    decoding_dict['ideology_binary'] = {0: 'left', 1: 'right'}
    decoding_dict['ideology_multiclass'] = {0: 'left', 1: 'moderate_left', 2: 'moderate_right', 3: 'right'}

    return decoding_dict


def decode_preds(predictions, decoding_dict):
    attrs = {'gender': [], 'profession': [], 'ideology_binary': [], 'ideology_multiclass': []}
    for i in range(len(predictions)):  # for each batch = cluster
        for j, attr in enumerate(list(attrs.keys())):  # for each attribute
            pred_idcs = []
            for k in range(len(predictions[i][j])):  # for each tweet in batch
                pred_idx = torch.argmax(predictions[i][j][k])
                pred_idcs.append(pred_idx)
            pred_counter = Counter(pred_idcs)  # count individual predictions for each tweet and trait
            most_common_pred = pred_counter.most_common(1)[0][0]  # get most common prediction
            attrs[f"{attr}"] += [decoding_dict[f"{attr}"][int(most_common_pred)] for _ in range(
                len(pred_counter))]  # append to dictionary as many times as there are tweets in batch

    attrs = handle_ideology_mismatch(attrs)

    return attrs


def handle_ideology_mismatch(attrs):
    attrs['ideology_multiclass'] = ['moderate_right' if 'right' in attrs['ideology_binary'] and "left" in attrs['ideology_multiclass'] else _ for _ in attrs['ideology_multiclass']]
    attrs['ideology_multiclass'] = ['moderate_left' if 'left' in attrs['ideology_binary'] and "right" in attrs['ideology_multiclass'] else _ for _ in attrs['ideology_multiclass']]
    return attrs


def main():
    parser = create_argumentparser()
    args = parser.parse_args()

    loaded_model = SpanishTweetsCLF.load_from_checkpoint(args.model_checkpoint)

    trainer = L.Trainer(accelerator="cpu", devices=1)

    train_dataset_path = "data/full_data/cleaned/train_clean_encoded.csv"
    val_dataset_path = "data/full_data/cleaned/val_clean_encoded.csv"
    test_dataset_path = args.test_dataset_path

    dm = SpanishTweetsDataModule(train_dataset_path,
                                 val_dataset_path,
                                 test_dataset_path)

    predictions = trainer.predict(loaded_model, dm)
    # with open("results.txt", "w") as f:
    #     f.write(str(predictions))
    #     print(predictions)

    # predictions = [[tensor([[-1.1136,  1.0259],
    #     [-0.6145,  0.6013],
    #     [-0.6027,  0.0801],
    #     [-0.1515,  0.5420],
    #     [-0.3795,  0.0117],
    #     [-1.1040,  1.2900],
    #     [-1.0363,  0.2335],
    #     [-0.3333,  0.1746],
    #     [-0.4148,  0.5312],
    #     [-0.8081,  0.4934],
    #     [-0.9492,  0.2211],
    #     [-0.5186,  0.7610],
    #     [-0.9853,  1.1022],
    #     [-0.3465, -0.0120],
    #     [-1.4271,  0.6708],
    #     [-1.2904,  1.2329],
    #     [-0.7030,  0.7387],
    #     [-0.2254, -0.0857],
    #     [-1.0416,  1.0364],
    #     [-0.8278,  1.1007],
    #     [-1.0316,  0.5566],
    #     [-1.0600,  0.5824],
    #     [-1.3850,  0.5954],
    #     [-0.4556,  0.5467],
    #     [ 0.0581, -0.3382],
    #     [-0.7226,  1.0174],
    #     [-0.3802,  0.6903],
    #     [ 0.0023,  0.1267],
    #     [-1.0059,  1.3237],
    #     [-0.9307,  0.7127],
    #     [-0.5863, -0.1131],
    #     [-0.7953,  0.8521],
    #     [-1.6476,  2.1355],
    #     [-1.0198,  0.5960],
    #     [-0.5864,  0.4811],
    #     [-0.0871, -0.4407],
    #     [-1.8821,  1.9532],
    #     [-0.8954,  0.7969],
    #     [-1.5241,  1.3737],
    #     [-1.1033,  2.0865],
    #     [ 0.0851,  0.1766],
    #     [-0.0176, -0.6766],
    #     [-0.5616,  0.4810],
    #     [-0.5489,  0.7307],
    #     [-0.0450, -0.2536],
    #     [-1.6461,  1.1294],
    #     [-1.2627,  0.2073],
    #     [-0.0047,  0.0638],
    #     [-0.8727,  0.5727],
    #     [-1.0660,  1.0269],
    #     [-0.9667,  0.5758],
    #     [-0.6940,  1.2271],
    #     [-1.0426,  1.4043],
    #     [-1.2605,  1.2054],
    #     [-1.2935,  0.7051],
    #     [-0.9681,  0.8656],
    #     [-1.7081,  0.9141],
    #     [-0.9256,  0.4929],
    #     [-1.1669,  0.5572],
    #     [-0.0484,  0.0429],
    #     [-0.4987,  0.4555],
    #     [-0.7228, -0.0149],
    #     [-0.9769,  0.4893],
    #     [ 0.0682, -0.3523],
    #     [-0.7944,  0.6120],
    #     [-0.9745,  0.8084],
    #     [-1.3015,  1.5728],
    #     [-0.6030,  0.1006],
    #     [ 0.3973, -1.0594],
    #     [-0.2653,  0.3524],
    #     [-1.0348,  1.0264],
    #     [-0.2499,  0.4704],
    #     [-1.5948,  1.2156],
    #     [-1.4019,  0.8716],
    #     [-0.6399, -0.2265],
    #     [-1.1608,  1.2860],
    #     [-1.0188,  0.9092],
    #     [-1.2527,  0.0780],
    #     [-0.7896,  0.7906],
    #     [-0.8169,  1.1137]]), tensor([[-3.7507e+00,  1.4804e+00,  4.3608e-02],
    #     [-3.6314e+00,  7.5818e-01,  5.1366e-01],
    #     [-9.8365e-01, -1.7166e-01,  7.8588e-02],
    #     [-1.4790e+00,  1.5498e-01, -2.1072e-01],
    #     [-1.1806e+00,  1.2393e-01,  1.2019e-01],
    #     [-3.4031e-01,  5.9843e-01, -3.3250e+00],
    #     [-3.3276e+00,  1.5720e+00, -2.6306e-01],
    #     [ 8.5490e-01, -1.1464e+00, -1.9146e+00],
    #     [-1.0959e+00,  7.4110e-02, -5.2084e-01],
    #     [-3.2050e+00, -7.7836e-02,  4.1751e-01],
    #     [-3.8789e+00,  1.9301e+00, -6.2268e-01],
    #     [-5.2188e-01,  7.4145e-01, -1.1064e+00],
    #     [-1.7518e+00,  2.5967e-01, -7.2583e-01],
    #     [-7.7643e-01,  3.8211e-01, -7.8770e-01],
    #     [-2.3069e+00,  4.1371e-01,  8.6897e-01],
    #     [-1.5771e+00, -1.5582e-01, -3.5038e-02],
    #     [-3.3937e+00,  5.9081e-01,  2.0171e-01],
    #     [-1.7722e+00,  1.2441e+00, -5.5973e-01],
    #     [-2.1953e+00,  1.0045e+00, -1.4214e+00],
    #     [-3.3339e+00,  1.0705e+00,  1.6107e-01],
    #     [-2.1015e+00,  5.9100e-01, -3.0982e-01],
    #     [-3.2315e+00,  1.9958e+00, -1.7163e+00],
    #     [-1.4039e+00,  1.7419e-01, -8.2262e-01],
    #     [-4.6403e+00,  1.2190e+00,  1.0113e+00],
    #     [-3.6466e+00,  1.3847e+00, -4.3422e-02],
    #     [-3.5638e+00,  1.4781e+00, -9.3405e-02],
    #     [-3.6686e+00,  2.3386e+00, -1.7647e+00],
    #     [-6.8714e+00,  1.8797e+00,  8.3485e-01],
    #     [-1.4074e+00,  1.2486e+00, -1.7128e+00],
    #     [-4.0322e+00,  2.4278e+00, -1.0195e+00],
    #     [-2.0698e+00,  5.8016e-01,  5.2117e-01],
    #     [-1.5885e+00,  1.8310e+00, -3.0504e+00],
    #     [-4.7678e+00,  2.5892e+00, -1.8348e+00],
    #     [-4.7333e+00,  2.9082e+00, -1.8075e+00],
    #     [-5.0826e+00,  1.9570e+00, -8.8161e-01],
    #     [-7.0044e+00,  2.1952e+00,  6.3250e-01],
    #     [-4.8628e+00,  2.0354e+00, -4.6912e-01],
    #     [-1.2166e+00,  1.3731e-01,  4.7142e-01],
    #     [-1.5781e+00,  4.3594e-02, -8.7637e-02],
    #     [-4.6369e+00,  2.8381e+00, -2.7405e+00],
    #     [-5.0734e+00,  3.8535e-01,  1.8313e+00],
    #     [-2.0261e+00,  3.9633e-01,  1.0415e-01],
    #     [-2.7140e+00,  1.1060e+00, -1.5632e+00],
    #     [-3.1490e+00,  1.6580e+00, -3.3677e-01],
    #     [-3.5985e+00,  1.0011e+00,  5.9924e-01],
    #     [-4.2809e+00,  1.8279e+00, -1.6036e+00],
    #     [-3.3104e+00,  4.3423e-01,  7.0025e-01],
    #     [-8.0614e-01,  4.6029e-01, -2.1887e+00],
    #     [-4.3019e+00,  1.3898e+00, -1.0199e+00],
    #     [-4.8599e+00,  6.6969e-01, -2.8270e-01],
    #     [-1.3912e+00,  2.5608e-01, -1.1452e-03],
    #     [-3.3199e+00,  1.2664e+00, -5.5518e-01],
    #     [-2.9426e-01,  4.7170e-01, -8.2804e-01],
    #     [-3.6077e+00,  1.1398e+00, -5.8781e-01],
    #     [-3.1451e+00,  1.1923e+00, -6.7791e-01],
    #     [-2.8994e+00,  2.8503e-01,  8.1375e-02],
    #     [-3.7012e+00,  1.5957e+00, -2.8314e-01],
    #     [-2.1103e+00,  6.2229e-02, -5.8292e-01],
    #     [-2.6320e+00,  1.4133e+00, -1.1134e+00],
    #     [-3.8188e+00,  1.3275e+00, -1.1216e+00],
    #     [-2.8594e+00,  6.2617e-01,  2.0449e-01],
    #     [-1.2642e+00,  8.3854e-01, -7.8304e-01],
    #     [-4.7653e+00,  1.5298e+00,  1.8353e-01],
    #     [-1.1686e+00,  5.8290e-01, -2.0560e+00],
    #     [-2.2529e+00,  6.8625e-01, -1.3502e+00],
    #     [-2.3549e+00,  9.6795e-01, -2.0845e-02],
    #     [-3.1914e+00,  1.8120e+00, -2.0570e+00],
    #     [-3.1233e+00,  1.3729e+00, -2.7201e-01],
    #     [-2.5659e+00,  1.6374e-01,  7.9033e-01],
    #     [-2.5755e+00,  1.4013e+00, -1.0771e+00],
    #     [-2.1818e+00,  1.2351e+00, -1.3144e+00],
    #     [-2.5238e+00,  1.4762e+00, -1.0346e+00],
    #     [-3.9359e+00,  1.2373e+00,  1.8634e-01],
    #     [-1.2818e+00,  1.7322e-01, -5.1443e-01],
    #     [-9.4466e-01,  3.9770e-01, -3.0745e-01],
    #     [-1.6491e-01,  2.4046e-01, -1.7796e+00],
    #     [-3.9545e+00,  1.0577e+00,  3.8453e-01],
    #     [-9.8080e-01,  8.2296e-02, -2.2189e-01],
    #     [-2.9990e+00,  1.7465e+00, -1.5355e+00],
    #     [-1.2655e+00,  1.3724e+00, -2.7020e+00]]), tensor([[-0.4613,  0.1427],
    #     [-0.8839,  0.8317],
    #     [ 0.0168,  0.1445],
    #     [-1.3556,  1.0432],
    #     [ 0.3523,  0.2228],
    #     [-0.8168,  0.8578],
    #     [-0.0894, -0.3331],
    #     [-0.5116,  1.0776],
    #     [-1.0911,  1.0196],
    #     [-0.1155,  0.4826],
    #     [-0.0792, -0.0115],
    #     [ 0.1078, -0.2492],
    #     [-0.9325,  1.4790],
    #     [ 0.5806,  0.2962],
    #     [-1.3013,  1.3565],
    #     [-0.4024,  0.7412],
    #     [-0.6734,  0.7534],
    #     [-0.5137,  0.4000],
    #     [-0.6645,  0.6602],
    #     [-1.3700,  0.9259],
    #     [-0.8220,  0.5182],
    #     [-1.0531,  0.7841],
    #     [ 0.0562, -0.6570],
    #     [-0.3367,  0.5292],
    #     [-0.9351,  1.1583],
    #     [ 0.0156,  0.1889],
    #     [-0.5312, -0.0295],
    #     [-0.1386,  0.2202],
    #     [-0.9793,  0.5161],
    #     [-1.6226,  1.5112],
    #     [-0.0062, -0.2105],
    #     [-0.7294,  0.0297],
    #     [-0.6963,  0.9825],
    #     [-0.5217,  0.6592],
    #     [-0.1597, -0.1761],
    #     [ 0.2924, -0.2624],
    #     [-1.7982,  1.5379],
    #     [-0.7239,  0.6324],
    #     [-1.2908,  1.0257],
    #     [-0.3669, -0.0343],
    #     [ 0.3317, -0.1939],
    #     [-0.2696,  0.0882],
    #     [-0.0334, -0.2670],
    #     [ 0.2755, -0.4280],
    #     [-0.6178,  0.0970],
    #     [-0.9643,  0.4394],
    #     [-0.5312,  0.4341],
    #     [-0.4574,  0.6035],
    #     [-1.1435,  0.7913],
    #     [-1.5761,  2.1717],
    #     [-0.8380,  0.7528],
    #     [-0.7916,  0.9801],
    #     [-0.9706,  0.6406],
    #     [ 0.0074,  0.0559],
    #     [-0.7711,  0.3088],
    #     [ 0.2726, -0.0762],
    #     [-0.5745,  0.7173],
    #     [-0.8825,  1.5965],
    #     [-0.5521,  0.1170],
    #     [ 0.8386, -0.6090],
    #     [-0.8796,  1.3130],
    #     [-0.0929, -0.4291],
    #     [-1.5584,  1.6197],
    #     [-0.6639,  0.2423],
    #     [-0.4537,  0.0225],
    #     [-0.2574,  0.1789],
    #     [-0.7238,  0.6310],
    #     [-0.7903,  0.9447],
    #     [ 0.1930,  0.2358],
    #     [-0.6314,  0.2552],
    #     [ 0.0222, -0.5349],
    #     [-0.6552,  0.4397],
    #     [-0.9824,  1.1715],
    #     [-0.6054,  0.4301],
    #     [ 0.0362,  0.0058],
    #     [-0.6888,  0.3086],
    #     [-0.3908,  0.4146],
    #     [-0.3742,  0.2916],
    #     [-0.4423,  0.0075],
    #     [-0.7108,  0.5171]]), tensor([[ 4.6760e-01, -8.8786e-01, -8.7102e-01,  2.8119e-01],
    #     [ 1.6831e-01, -1.8919e+00, -7.1414e-01,  1.5451e+00],
    #     [ 6.6517e-01, -3.9391e-01, -2.6694e-01, -4.4990e-02],
    #     [-1.9600e+00, -5.1248e-01,  1.7731e-01,  7.8150e-01],
    #     [-1.8589e+00,  1.0807e-01,  3.1659e-01, -4.9857e-01],
    #     [-1.3236e+00, -4.9881e-03, -1.2022e-01, -6.4794e-02],
    #     [-3.2851e-01, -7.5372e-01, -4.4183e-02, -5.7578e-02],
    #     [-1.6307e+00, -1.0912e+00,  6.4668e-01, -7.7326e-01],
    #     [-8.9354e-01, -1.1503e+00,  6.0696e-02,  6.5317e-01],
    #     [-4.5383e-01, -3.6812e-01, -1.2856e+00,  4.8478e-01],
    #     [-4.0548e-01,  8.9006e-02,  4.0016e-01, -1.2175e+00],
    #     [-5.3981e-01,  2.6854e-01, -1.2499e-01, -8.6145e-01],
    #     [-2.3025e+00, -1.4502e-01, -9.4562e-01,  1.0293e+00],
    #     [-1.3800e+00, -1.6032e-01, -5.2407e-01, -1.2220e-01],
    #     [-2.2831e+00, -1.3157e+00, -7.3700e-01,  1.5974e+00],
    #     [-1.6614e+00, -3.9130e-01, -1.1774e+00,  1.2531e+00],
    #     [-4.5136e-01, -1.0162e+00, -2.1734e-03,  3.8731e-01],
    #     [-4.3333e-01, -5.8866e-01,  3.0403e-02,  4.6705e-01],
    #     [-1.4186e+00, -7.0178e-01,  5.5752e-01,  1.1707e-01],
    #     [-1.2925e+00, -1.5740e+00,  7.5985e-01,  9.9120e-04],
    #     [-1.0839e+00, -9.0786e-01,  9.6628e-02, -1.6310e-02],
    #     [-9.1784e-01, -1.6045e+00, -3.6000e-01,  1.3645e+00],
    #     [ 1.5463e-01,  2.2552e-02, -6.0821e-01, -1.7036e-01],
    #     [-4.8679e-01, -3.5356e-01,  5.5328e-01, -1.4506e+00],
    #     [-2.2474e+00,  3.9290e-01,  9.8817e-01, -1.2593e+00],
    #     [-5.1601e-01, -2.5359e-01,  1.1803e-01, -1.3925e+00],
    #     [-1.0729e+00,  1.7112e-01,  5.8485e-01, -2.5991e+00],
    #     [-2.8267e+00,  8.3784e-02, -2.0508e-01, -5.7423e-01],
    #     [-7.2531e-01, -2.3405e-01,  8.3980e-01, -2.2734e+00],
    #     [-3.3027e+00, -1.2760e+00,  1.7135e+00, -1.5013e+00],
    #     [-6.1065e-01,  1.2447e-01, -6.8124e-01,  1.0264e-01],
    #     [-4.0684e-01, -8.4766e-02,  1.0663e+00, -2.0785e+00],
    #     [ 2.1076e-01, -2.1926e+00, -4.1004e-02,  5.5218e-01],
    #     [-1.2745e+00, -6.4653e-01,  5.9870e-01, -5.9089e-01],
    #     [-2.2886e-01, -1.1595e+00,  8.9480e-01, -1.7345e+00],
    #     [-2.2515e-01,  4.2409e-01,  1.5548e-01, -2.8227e+00],
    #     [-1.6052e+00, -1.3525e+00,  3.0820e-01,  8.1058e-01],
    #     [-1.6160e-01, -1.1675e+00, -4.2612e-02,  5.4186e-01],
    #     [-1.1252e+00, -1.3340e+00, -8.6897e-03,  1.2562e+00],
    #     [-3.7714e-01,  2.9519e-01,  5.5885e-01, -4.0086e+00],
    #     [-1.6466e-01, -3.4974e-01, -1.0466e+00,  1.3616e-01],
    #     [-2.8220e-02, -9.9100e-01, -9.5140e-01,  2.7312e-01],
    #     [-5.9145e-01, -3.8158e-02, -8.6960e-02, -4.6793e-01],
    #     [-1.1337e+00,  6.6312e-01,  1.2982e-01, -1.4432e+00],
    #     [-7.6665e-01, -7.1238e-01, -2.9039e-01, -1.0890e-01],
    #     [-3.4102e-01, -1.2478e+00, -6.2290e-01,  9.7450e-01],
    #     [-1.3722e+00, -4.0900e-01, -5.9546e-01,  7.5094e-01],
    #     [-1.9040e+00, -1.9537e-01, -4.2602e-03,  2.1146e-01],
    #     [-9.2431e-01, -7.2693e-01, -2.0648e-01,  9.2735e-01],
    #     [-1.3365e+00, -2.7847e+00, -1.5214e+00,  3.0450e+00],
    #     [-5.6103e-01, -1.0546e+00, -3.4005e-01,  9.6688e-01],
    #     [-9.4281e-01, -8.6519e-01, -7.7517e-02,  8.3196e-01],
    #     [-6.5087e-01, -6.4240e-01, -1.5390e-03,  3.2207e-01],
    #     [-9.8538e-01, -8.7606e-02, -1.4854e-02, -6.7188e-01],
    #     [-8.4039e-01, -5.8477e-01, -6.3250e-01,  7.4168e-01],
    #     [ 1.5463e+00, -9.9124e-01, -5.8592e-01,  1.2503e-02],
    #     [-1.2545e+00, -3.6476e-01, -5.4974e-01,  3.0076e-01],
    #     [-1.0789e+00, -1.7004e+00,  9.0144e-01,  8.8690e-02],
    #     [-1.2620e+00, -3.5015e-01, -2.6713e-01,  5.3878e-01],
    #     [-5.3245e-01,  6.7967e-01, -8.7165e-01, -1.3509e+00],
    #     [-2.5098e+00, -8.4293e-01,  7.4508e-01, -1.0026e+00],
    #     [-3.0620e-01,  2.3755e-01, -5.6680e-02, -5.8150e-01],
    #     [-1.1631e+00, -1.7523e+00,  1.1792e-01,  1.4553e+00],
    #     [-1.6107e+00, -1.9066e+00, -1.5279e+00,  2.3774e+00],
    #     [-1.4050e+00, -2.3153e-02, -4.4895e-01,  2.5929e-01],
    #     [-4.7048e-01, -6.6409e-01,  2.0738e-01, -1.2238e-01],
    #     [-1.9627e+00, -5.9531e-01, -1.7793e-01,  5.2318e-01],
    #     [-1.0480e+00, -1.0933e+00, -5.7551e-01,  8.6626e-01],
    #     [-8.5286e-01,  1.5819e-01, -6.7569e-01, -3.0340e-01],
    #     [-4.4021e-01, -6.7526e-01,  2.9862e-02, -5.8404e-02],
    #     [-2.0780e+00, -3.8054e-01, -1.9360e-01,  2.7881e-01],
    #     [-1.3125e+00, -7.9483e-01,  3.5457e-01, -3.6856e-02],
    #     [-1.2147e-01, -2.5827e+00,  2.5139e-01,  1.0117e+00],
    #     [-2.2650e-01, -4.7878e-01,  8.0749e-01, -9.0161e-01],
    #     [ 4.4697e-01, -9.2407e-02, -1.0123e+00,  4.5250e-03],
    #     [-2.9414e+00, -9.9041e-01,  1.5191e-02,  8.5458e-01],
    #     [-1.3433e+00, -5.4357e-01, -7.1572e-02, -2.4405e-01],
    #     [-1.0912e+00, -4.7271e-01,  1.4164e-01,  1.0140e-02],
    #     [-1.2315e+00, -2.4744e-01,  1.9223e-01, -3.5292e-01],
    #     [-1.8110e+00,  7.3536e-02,  5.4516e-01, -1.0379e+00]])]]

    attrs = {'gender': [], 'profession': [], 'ideology_binary': [], 'ideology_multiclass': []}

    decoding_dict = create_decoding_dict()

    attrs.update(decode_preds(predictions, decoding_dict))

    results_df = pd.DataFrame(attrs)

    test_df = pd.read_csv(test_dataset_path)
    labels = test_df[["label"]]

    combined_df = pd.concat([labels, results_df], axis=1)

    combined_df.to_csv(args.output_path, index=False)


if __name__ == "__main__":
    main()
